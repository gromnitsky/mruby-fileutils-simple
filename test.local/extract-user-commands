#!/usr/bin/env ruby

# From awesome_print.
def method_tuple method
  args = method.parameters.inject([]) do |arr, (type, name)|
    name ||= (type == :block ? 'block' : "arg#{arr.size + 1}")
    arr << case type
           when :req        then name.to_s
           when :opt        then "[#{name}]"
           when :rest       then "*#{name}"
           when :block      then "&#{name}"
           else '?'
           end
  end

  # method.to_s formats to handle:
  #
  # #<Method: Fixnum#zero?>
  # #<Method: Fixnum(Integer)#years>
  # #<Method: User(#<Module:0x00000103207c00>)#_username>
  # #<Method: User(id: integer, username: string).table_name>
  # #<Method: User(id: integer, username: string)(ActiveRecord::Base).current>
  # #<UnboundMethod: Hello#world>
  #
  if method.to_s =~ /(Unbound)*Method: (.*)[#\.]/
    unbound, klass = $1 && '(unbound)', $2
    if klass && klass =~ /(\(\w+:\s.*?\))/  # Is this ActiveRecord-style class?
      klass.sub!($1, '')                    # Yes, strip the fields leaving class name only.
    end
    owner = "#{klass}#{unbound}".gsub('(', ' (')
  end

  [ method.name.to_s, "(#{args.join(', ')})", owner.to_s ]
end




require '../mrblib/main'

FileUtilsSimple::Commands.singleton_methods.sort.each do |idx|
  tuple = method_tuple FileUtilsSimple::Commands.method(idx)
  puts "#{tuple[0]}#{tuple[1]}"
end
